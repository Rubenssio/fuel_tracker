Legend: [ ] = todo, [v] = done

[v] 00 — Bootstrap: runnable web service that returns "success" at /
[v] 01 — Persistence: add database to docker-compose; auto-apply schema and seed baseline data on start
[v] 02 — Authentication: sign up/in/out with secure session cookies and CSRF
[v] 03 — Profile & Settings: units, currency, timezone; conversions are view-time only (storage stays metric)
[v] 04 — Vehicles: add/edit/delete; one user sees only their own data
[v] 05 — Fill-Ups: create/edit/delete; validation & integrity rules (monotonic odometer, no future dates)
[v] 06 — History: list with sorting, pagination, and filters (date/brand/grade/station/vehicle)
[v] 07 — Metrics: per-fill calculations and rolling/all-time aggregates; rounding rules
[v] 08 — Statistics: overview widgets and charts; brand/grade comparison table; vehicle/period selectors
[v] 09 — Legal & Account: Terms, Privacy, data export (CSV), account deletion
[v] 10 — Reliability & Security: user-friendly errors, no stack traces; strict self-data isolation
[v] 11 — Observability & Logging: correlation IDs and auth event logs
[v] 12 — Final pass: clean clone -> docker compose up -> everything reachable and meets performance notes


UI goals (MVP)
- Simple, modern, lightweight look (no JS frameworks).
- Cohesive color system and typography.
- Consistent buttons, cards, tables, and forms.
- Local SVG icons only; no external assets.
- Footer stick-to-bottom; responsive up to ~1024px.
- Accessible color contrast and focus rings.

Process
- Ship iterative PRs labeled `ui`, each small and self-contained.
- No fixed steps; review in the browser and tweak.

Definition of done (per PR)
- No static 404s in dev logs.
- Icons sized via `.icon` classes (20–28px).
- Buttons/tables/forms use shared classes.
- No changes to backend logic.